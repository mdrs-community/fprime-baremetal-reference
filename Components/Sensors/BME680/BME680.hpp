// ======================================================================
// \title  BME680.template.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for BME680 component implementation class
// ======================================================================

#ifndef Sensors_BME680_HPP
#define Sensors_BME680_HPP

#include "Components/Sensors/BME680/BME680ComponentAc.hpp"

namespace Sensors {

  class BME680 :
    public BME680ComponentBase
  {

    public:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct BME680 object
      BME680(
          const char* const compName //!< The component name
      );

      //! Destroy BME680 object
      ~BME680();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Handler implementations for user-defined typed input ports
      // ----------------------------------------------------------------------

      //! Handler implementation for run
      //!
      //! Port receiving calls from the rate group
      void run_handler(
          NATIVE_INT_TYPE portNum, //!< The port number
          NATIVE_UINT_TYPE context //!< The call order
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Handler implementations for commands
      // ----------------------------------------------------------------------

      //! Handler implementation for command PowerSwitch
      //!
      //! Command to turn on the device
      void PowerSwitch_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::On powerState
      );

  };

}

#endif
